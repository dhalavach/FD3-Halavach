"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
require("./styles.css");
var _mockData = _interopRequireDefault(require("./mockData.json"));
var _react = require("react");
var _Table = _interopRequireDefault(require("./components/Table"));
var _Filter = _interopRequireDefault(require("./components/Filter"));
var _Search = _interopRequireDefault(require("./components/Search"));
var _Cart = _interopRequireDefault(require("./components/Cart"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function App() {
  var _useState = (0, _react.useState)(_mockData.default.products),
    _useState2 = _slicedToArray(_useState, 2),
    products = _useState2[0],
    setProducts = _useState2[1];
  var _useState3 = (0, _react.useState)(''),
    _useState4 = _slicedToArray(_useState3, 2),
    sort = _useState4[0],
    setSort = _useState4[1];
  var _useState5 = (0, _react.useState)(''),
    _useState6 = _slicedToArray(_useState5, 2),
    type = _useState6[0],
    setType = _useState6[1];
  var _useState7 = (0, _react.useState)(localStorage.getItem('cartProducts') ? JSON.parse(localStorage.getItem('cartProducts')) : []),
    _useState8 = _slicedToArray(_useState7, 2),
    cartProducts = _useState8[0],
    setCartProducts = _useState8[1];
  var _useState9 = (0, _react.useState)(''),
    _useState10 = _slicedToArray(_useState9, 2),
    searchQuery = _useState10[0],
    setSearchQuery = _useState10[1];
  var handleFilterProducts = function handleFilterProducts(e) {
    setType(e.target.value);
  };
  var filterProducts = function filterProducts(type, arr) {
    if (type !== 'all') arr = arr.filter(function (product) {
      return product.itemType === type;
    });
    return arr;
  };
  var handleSortProducts = function handleSortProducts(e) {
    setSort(e.target.value);
  };
  var sortProducts = function sortProducts(sort, arr) {
    if (sort === 'ascending') {
      arr = arr.sort(function (a, b) {
        return a.itemPrice - b.itemPrice;
      });
    } else if (sort === 'descending') {
      arr = arr.sort(function (a, b) {
        return b.itemPrice - a.itemPrice;
      });
    } else if (sort === 'az') {
      arr = arr.sort(function (a, b) {
        return a.itemName.localeCompare(b.itemName);
      });
    } else if (sort === 'za') {
      arr = arr.sort(function (a, b) {
        return -a.itemName.localeCompare(b.itemName);
      });
    }
    return arr;
  };
  var handleSearchProducts = function handleSearchProducts(e) {
    setSearchQuery(e.target.value);
  };
  var searchProducts = function searchProducts(searchQuery, arr) {
    arr = arr.filter(function (product) {
      return product.itemName.toString().toLowerCase().includes(searchQuery.toString().toLowerCase());
    });
    return arr;
  };
  var add = function add(product) {
    var newCartProducts = _toConsumableArray(cartProducts);
    var inCart = false;
    var _iterator = _createForOfIteratorHelper(newCartProducts),
      _step;
    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var cartItem = _step.value;
        if (cartItem.id === product.id) {
          if (cartItem.count) cartItem.count += 1;
          inCart = true;
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
    if (!inCart) {
      newCartProducts.push(_objectSpread(_objectSpread({}, product), {}, {
        count: 1
      }));
    }
    setCartProducts(newCartProducts);
    localStorage.setItem('cartProducts', JSON.stringify(newCartProducts));
  };
  var remove = function remove(product) {
    var newCartProducts = _toConsumableArray(cartProducts).filter(function (item) {
      return item.id !== product.id;
    });
    setCartProducts(newCartProducts);
    localStorage.setItem('cartProducts', JSON.stringify(newCartProducts));
  };
  var createOrder = function createOrder(order) {
    alert("saving order for ".concat(order.name.toString(), " - to be implemented later..."));
    console.log(order);
  };
  (0, _react.useEffect)(function () {
    var arr = _toConsumableArray(_mockData.default.products);
    if (type) arr = filterProducts(type, arr);
    if (sort) arr = sortProducts(sort, arr);
    if (searchQuery) arr = searchProducts(searchQuery, arr);
    setProducts(arr);
  }, [sort, type, searchQuery]);
  return <div className='wrapper'>
      <div className='grid-container'>
        <header>
          <a href='/'>Cart</a>
        </header>
        <main>
          <div className='content'>
            <div className='main'>
              <div className='controls'>
                <div className='filter-order'>
                  <_Filter.default count={products.length} type={type} sort={sort} handleFilterProducts={handleFilterProducts} handleSortProducts={handleSortProducts} />
                </div>
                <div className='search'>
                  <_Search.default searchQuery={searchQuery} handleSearchProducts={handleSearchProducts} />
                </div>
              </div>
              <_Table.default products={products} add={add} />
            </div>

            <div className='sidebar'>
              <_Cart.default cartProducts={cartProducts} remove={remove} createOrder={createOrder} setCartProducts={setCartProducts} />
            </div>
          </div>
        </main>
        <footer>2023</footer>
      </div>
    </div>;
}
var _default = App;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,