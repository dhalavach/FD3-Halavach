"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Table;
var _util = require("../util");
var _reactAwesomeReveal = require("react-awesome-reveal");
var _reactModal = _interopRequireDefault(require("react-modal"));
var _react = require("react");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function Table(props) {
  var products = props.products,
    add = props.add;
  var _useState = (0, _react.useState)(null),
    _useState2 = _slicedToArray(_useState, 2),
    productInModal = _useState2[0],
    setProductInModal = _useState2[1];
  var openModal = function openModal(product) {
    setProductInModal(product);
  };
  var closeModal = function closeModal() {
    setProductInModal(null);
  };
  return <div>
      <ul className='products'>
        {products.map(function (product) {
        return <_reactAwesomeReveal.Fade direction={'up'} triggerOnce={true}>
              <li key={product.id}>
                <div className='product' onClick={function () {
              openModal(product);
            }}>
                  <a href={'#' + product.id}>
                    <img src={product.itemImage} alt={product.itemImageAlt}></img>
                    <p>{product.itemName}</p>
                  </a>
                </div>

                <div className='product-price'>
                  <div>{(0, _util.formatMoney)(product.itemPrice)}</div>
                  <button className='btn primary' onClick={function () {
                return add(product);
              }}>
                    Add to Cart
                  </button>
                </div>
              </li>
            </_reactAwesomeReveal.Fade>;
      })}
      </ul>
      <div>
        {productInModal && <div className="modal__wrapper">
            <_reactModal.default isOpen={true} onRequestClose={closeModal}>
              <_reactAwesomeReveal.Zoom>
                <div className='modal__close-wrapper'>
                  <button className='close-modal' onClick={closeModal}>
                    x
                  </button>
                </div>
                <div>
                  <div className='product'>
                    <div className='modal__image-description-wrapper'>
                      <div>
                        <img src={productInModal.itemImage} alt={productInModal.itemImageAlt}></img>{' '}
                      </div>
                      <div className='modal__description'>
                        <span className='modal__description'>
                          {productInModal === null || productInModal === void 0 ? void 0 : productInModal.itemDescription}
                        </span>
                      </div>
                    </div>
                    <p>{productInModal.itemName}</p>
                  </div>
                  <div className='product-price'>
                    <div>{(0, _util.formatMoney)(productInModal.itemPrice)}</div>
                    <button className='btn primary' onClick={function () {
                  return add(productInModal);
                }}>
                      Add to Cart
                    </button>
                  </div>
                </div>
              </_reactAwesomeReveal.Zoom>
            </_reactModal.default>
          </div>}
      </div>
    </div>;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,