"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Cart;
var _react = _interopRequireWildcard(require("react"));
var _reactAwesomeReveal = require("react-awesome-reveal");
var _util = require("../util");
var _CheckoutForm = _interopRequireDefault(require("./CheckoutForm"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function Cart(props) {
  var cartProducts = props.cartProducts,
    remove = props.remove,
    createOrder = props.createOrder,
    setCartProducts = props.setCartProducts;
  var _useState = (0, _react.useState)(false),
    _useState2 = _slicedToArray(_useState, 2),
    checkoutFormOpen = _useState2[0],
    setCheckoutFormOpen = _useState2[1];
  var _useState3 = (0, _react.useState)(),
    _useState4 = _slicedToArray(_useState3, 2),
    productToRemove = _useState4[0],
    setProductToRemove = _useState4[1];
  var order = function order(orderObj) {
    createOrder(_objectSpread(_objectSpread({}, orderObj), {}, {
      products: cartProducts
    }));
  };
  (0, _react.useEffect)(function () {
    setCartProducts(cartProducts);
  }, [productToRemove]);
  return <>
      <div>
        {cartProducts.length === 0 ? <div className='cart cart-header'>Empty</div> : <div className='cart cart-header'>
            {cartProducts.length} product(s) in cart
          </div>}
      </div>
      {cartProducts.length > 0 && <div>
          <div className='cart'>
            <ul className='cart-products'>
              {cartProducts.map(function (product) {
            return <_reactAwesomeReveal.Fade direction={'left'} triggerOnce={true}>
                    <li key={product.id} className={"".concat(product.id == productToRemove ? 'removing' : '')}>
                      <div>
                        <img src={product.itemImage} alt={product.itemImageAlt}></img>
                      </div>
                      <div>{product.itemName}</div>
                      <div className='right'>
                        {"".concat((0, _util.formatMoney)(product.itemPrice), " x  ").concat(product === null || product === void 0 ? void 0 : product.count)}
                        <button className='cart__button-remove' onClick={function () {
                    setProductToRemove(product.id);
                    setTimeout(function () {
                      remove(product);
                      setProductToRemove(undefined);
                    }, 1000);
                  }}>
                          Remove
                        </button>
                      </div>
                    </li>
                  </_reactAwesomeReveal.Fade>;
          })}
            </ul>
          </div>
          <div className='cart__total'>
            <div>
              Total:
              {cartProducts.reduce(function (acc, curr) {
            return acc + Number(curr === null || curr === void 0 ? void 0 : curr.count) * curr.itemPrice;
          }, 0)}
            </div>
          </div>
          <button className='btn primary' onClick={function () {
        return setCheckoutFormOpen(true);
      }}>
            Checkout
          </button>
        </div>}
      {checkoutFormOpen && <_CheckoutForm.default order={order} />}
    </>;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,